from config import *
import requests
from bs4 import BeautifulSoup

def place_formatter(date) -> str:
    date = date.replace("—É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å", "—É–∫")
    date = date.replace("–ì–ª–∞–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ", "–ì–ó")
    date = date.replace("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å", "–õ–∞–±. –∫")
    date = date.replace("–•–∏–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å", "–•–∏–º. –∫")
    date = date.replace("–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å", "–ú–µ—Ö. –∫")
    date = date.replace("–ù–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ—Ä–ø—É—Å", "–ù–ò–ö")
    date = date.replace("–ì–∏–¥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å-1", "–ì–¢–ö-1")
    date = date.replace("–ì–∏–¥—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–ø—É—Å-2", "–ì–¢–ö-2")
    date = date.replace("–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å, –∞—É–¥. –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª", "–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å")
    date = date.replace(", –∞—É–¥. –ù–µ—Ç", "")
    date = date.replace("–∞—É–¥. ", "")
    return date

def subject_name_formatter(date) -> str:
    date = date.replace("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–ë–ñ–î")
    date = date.replace("–ú–æ–¥—É–ª—å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è ", "")
    date = date.replace("–≠–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç", "–§–∏–∑-—Ä–∞")
    date = date.replace("–¢–µ–æ—Ä–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ø–µ–π", "–¢–≠–¶")
    date = date.replace("–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–ú–∞—Ç. –ê–Ω–∞–ª–∏–∑")
    date = date.replace("–í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á", "–í–≤–ú–¢–ó")
    date = date.replace("–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:", "–ò–Ω. –Ø–∑.")
    date = date.replace("–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å", "")
    date = date.replace("–†–∞–¥–∏–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ü–µ–ø–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã", "–†–¶–∏–°")
    date = date.replace("(", "").replace(")", "")
    return date

def date_extender(date) -> str:
    date = date.replace("—è–Ω–≤.", "—è–Ω–≤–∞—Ä—è")
    date = date.replace("—Ñ–µ–≤.", "—Ñ–µ–≤—Ä–∞–ª—è")
    date = date.replace("–º–∞—Ä.", "–º–∞—Ä—Ç–∞")
    date = date.replace("–∞–ø—Ä.", "–∞–ø—Ä–µ–ª—è")
    date = date.replace("–º–∞–π.", "–º–∞—è")
    date = date.replace("–∏—é–Ω.", "–∏—é–Ω—è")
    date = date.replace("–∏—é–ª.", "–∏—é–ª—è")
    date = date.replace("–∞–≤–≥.", "–∞–≤–≥—É—Å—Ç–∞")
    date = date.replace("—Å–µ–Ω—Ç.", "—Å–µ–Ω—Ç—è–±—Ä—è")
    date = date.replace("–æ–∫—Ç.", "–æ–∫—Ç—è–±—Ä—è")
    date = date.replace("–Ω–æ—è–±.", "–Ω–æ—è–±—Ä—è")
    date = date.replace("–¥–µ–∫.", "–¥–µ–∫–∞–±—Ä—è")

    date = date.replace("–ø–Ω", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
    date = date.replace("–≤—Ç", "–í—Ç–æ—Ä–Ω–∏–∫")
    date = date.replace("—Å—Ä", "–°—Ä–µ–¥–∞")
    date = date.replace("—á—Ç", "–ß–µ—Ç–≤–µ—Ä–≥")
    date = date.replace("–ø—Ç", "–ü—è—Ç–Ω–∏—Ü–∞")
    date = date.replace("—Å–±", "–°—É–±–±–æ—Ç–∞")
    date = date.replace("–≤—Å", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
    return date

def lesson_info_finder(lesson : BeautifulSoup):
    soup = BeautifulSoup(str(lesson), 'lxml')

    subject_name = soup.find("div", class_="lesson__subject").text
    subject_place = soup.find("div", class_="lesson__places").text.replace(", ", ",")
    subject_type = soup.find("div", class_="lesson__type").text

    subject_time, subject_name = subject_name.split()[0], " ".join(subject_name.split()[1:])

    return subject_name, subject_place, subject_type, subject_time


def schedule_weekly_dp(group_id, local_date) -> Text:
    try:
        marker1, marker2 = map(int, group_id.split("-"))

        request_link = scheduleStudentLink.format(marker1, marker2, local_date)

        contents = requests.get(request_link)
        match contents.status_code:
            case 200:  # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
                output_lesson_data = {}
                contents = contents.text
                soup = BeautifulSoup(contents, 'lxml')
                cur_schedule = soup.find_all("li", class_="schedule__day")

                to_send_text = Text("")
                group = soup.find("span", class_="lesson__group").text

                for a in cur_schedule:
                    soup = BeautifulSoup(str(a), 'lxml')

                    date = soup.find("div", class_="schedule__date").text + "\n"

                    to_send_text += Bold(Underline(date_extender(date)))

                    lessons_arr = soup.find_all("li", class_="lesson")

                    output_data = []

                    for lesson in lessons_arr:
                        lesson = str(lesson)
                        soup = BeautifulSoup(lesson, 'lxml')
                        subject_name = soup.find("div", class_="lesson__subject").text
                        subject_place = soup.find("div", class_="lesson__places").text.replace(", ", ",")
                        subject_type = soup.find("div", class_="lesson__type").text

                        output_lesson_data['name'] = subject_name
                        output_lesson_data['type'] = subject_type
                        output_lesson_data['place'] = subject_place

                        output_data.append(output_lesson_data)
                        output_lesson_data = {}

                    schedule = output_data

                    if schedule[0]['name'] != "None":
                        for lesson in schedule:
                            subject_name = lesson['name']
                            subject_time = ""
                            for i in range(0, subject_name.find(" ")):
                                subject_time += subject_name[i]
                            subject_name = subject_name_formatter(subject_name.replace(subject_time, ""))
                            subject_place = place_formatter(lesson['place'])

                            subject_type = lesson['type']
                            if subject_type == "–ü—Ä–∞–∫—Ç–∏–∫–∞":
                                line = Text(f"    üîµ ", Bold(Underline(f"{subject_time}")), " - ", f"{subject_place}",
                                            " -", Bold(Italic(f"{subject_name}")))
                            elif subject_type == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ":
                                line = Text(f"    üî¥ ", Bold(Underline(f"{subject_time}")), " - ", f"{subject_place}",
                                            " -", Bold(Italic(f"{subject_name}")))
                            else:
                                line = Text(f"    üü¢ ", Bold(Underline(f"{subject_time}")), " - ", f"{subject_place}",
                                            " -", Bold(Italic(f"{subject_name}")))

                            to_send_text = to_send_text + line + "\n"
                    else:
                        to_send_text = Text("–†–∞–¥—É–π—Å—è, –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫! –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")

                    to_send_text += Text("\n")

                to_send_text = Text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ") + Bold(Italic(group)) + " –Ω–∞ " + Bold(Underline("–Ω–µ–¥–µ–ª—é\n\n")) + to_send_text

                return to_send_text

            case 404:
                return Text("–°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
    except (Exception,):
        return Text("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!")

def schedule_dp(group_id, local_date) -> Text:
    output_data = []
    try:
        marker1, marker2 = map(int, group_id.split("-"))

        request_link = scheduleStudentLink.format(marker1, marker2, local_date)

        contents = requests.get(request_link)
        match contents.status_code:
            case 200:  # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
                output_lesson_data = {}
                soup = BeautifulSoup(contents.text, 'lxml')
                cur_schedule = soup.find_all("li", class_="schedule__day")

                working_day = ""
                flag = 0

                group = soup.find("span", class_="lesson__group").text

                for a in cur_schedule:
                    a = str(a)
                    soup = BeautifulSoup(a, 'lxml')
                    if int(soup.find("div", class_="schedule__date").text[0:2]) == int(local_date.day):
                        working_day = a
                        flag = 1
                        break
                if flag == 0:
                    output_lesson_data['name'] = "None"
                    output_lesson_data['type'] = "None"
                    output_lesson_data['place'] = "None"
                    output_lesson_data['teacher'] = "None"
                    output_data.append(output_lesson_data)
                    to_send_text = Text("–†–∞–¥—É–π—Å—è, –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫! ", Bold("{0}".format(local_date.strftime('%d/%m/%Y'))),
                                      " –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
                else:

                    soup = BeautifulSoup(working_day, 'lxml')
                    lessons_arr = soup.find_all("li", class_="lesson")

                    for lesson in lessons_arr:
                        lesson = str(lesson)
                        soup = BeautifulSoup(lesson, 'lxml')
                        subject_name = soup.find("div", class_="lesson__subject").text
                        subject_place = soup.find("div", class_="lesson__places").text
                        subject_teacher = soup.find("div", class_="lesson__teachers")
                        subject_type = soup.find("div", class_="lesson__type").text
                        if str(subject_teacher) == "None":
                            subject_teacher = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        else:
                            subject_teacher = subject_teacher.text
                        output_lesson_data['name'] = subject_name
                        output_lesson_data['type'] = subject_type
                        output_lesson_data['place'] = subject_place
                        output_lesson_data['teacher'] = subject_teacher

                        output_data.append(output_lesson_data)
                        output_lesson_data = {}

                    schedule = output_data

                    if schedule[0]['name'] != "None":
                        to_send_text = Text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ", Bold(Italic(group)), " –Ω–∞ ", Underline(
                            Bold(f"{local_date.strftime('%d/%m/%Y')}\n\n")))  # –ò–ó–ú–ï–ù–ò–¢–¨ –§–û–†–ú–ê–¢
                        for lesson in schedule:
                            subject_name = lesson['name']
                            subject_time = ""
                            for i in range(0, subject_name.find(" ")):
                                subject_time += subject_name[i]
                            subject_name = subject_name.replace(subject_time, "")
                            subject_place = lesson['place']
                            subject_teacher = lesson['teacher'].strip()
                            subject_type = lesson['type']
                            if subject_type == "–ü—Ä–∞–∫—Ç–∏–∫–∞":
                                line = Text(Bold(Underline(f"{subject_time}")), " -",
                                            Bold(Italic(f"{subject_name}"), "\n    üîµ ", f"{subject_type}\n"), "    üè¢ ",
                                            Underline(f"{subject_place}\n"), f"    üë® {subject_teacher}")
                            elif subject_type == "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ":
                                line = Text(Bold(Underline(f"{subject_time}")), " -",
                                            Bold(Italic(f"{subject_name}"), "\n    üî¥ ", f"{subject_type}\n"), "    üè¢ ",
                                            Underline(f"{subject_place}\n"), f"    üë® {subject_teacher}")
                            else:
                                line = Text(Bold(Underline(f"{subject_time}")), " -",
                                            Bold(Italic(f"{subject_name}"), "\n    üü¢ ", f"{subject_type}\n"), "    üè¢ ",
                                            Underline(f"{subject_place}\n"), f"    üë® {subject_teacher}")

                            to_send_text = to_send_text + line + "\n\n"
                    else:
                        to_send_text = Text("–†–∞–¥—É–π—Å—è, –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫! ", Bold("{0}".format(local_date.strftime('%d/%m/%Y'))),
                                          " –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")

                return to_send_text

            case 404:
                return Text("–°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
    except (Exception,):
        return Text("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!")

def schedule_teachers_helper(teacher_name : str, local_date) -> any:
    response = requests.get(f"{searchTeacherLink}{teacher_name}")

    if response.status_code != 200:
        print(f"\033[93m–í–Ω–∏–º–∞–Ω–∏–µ! –°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! Response code: {response.status_code}\033[0m")
        return Text("–°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!"), None

    soup = BeautifulSoup(response.text, 'lxml')
    teachers = soup.find_all("a", class_="search-result__link", href=True)

    if len(teachers) > 1:
        return Text("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–ø–∏—à–∏ –§–ò–û —Ç–æ—á–Ω–µ–µ"), None
    elif not teachers:
        print(f"\033[93m–í–Ω–∏–º–∞–Ω–∏–µ! –¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! Teacher name: {teacher_name}\033[0m")
        return Text("–û—à–∏–±–∫–∞! –¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"), None

    response = requests.get(scheduleTeacherLink.format(teachers[0]['href'], local_date))

    if response.status_code != 200:
        print(f"\033[93m–í–Ω–∏–º–∞–Ω–∏–µ! –°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! Response code: {response.status_code}\033[0m")
        return Text("–°–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!"), None

    return BeautifulSoup(response.text, 'lxml'), teachers[0].text

def schedule_teachers_dp(teacher_name : str, local_date):
    soup, teacher_name = schedule_teachers_helper(teacher_name, local_date)
    if type(soup) == Text: return soup

    working_day = ""
    flag = 0
    for a in soup.find_all("li", class_="schedule__day"):
        a = str(a)
        soup = BeautifulSoup(a, 'lxml')
        if int(soup.find("div", class_="schedule__date").text[0:2]) == int(local_date.day):
            working_day = a
            flag = 1
            break

    to_send_text = Text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ",
                        Underline(Bold(f"{local_date.strftime('%d/%m/%Y')}")),
                        " –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n",
                        Italic(Bold(f"{teacher_name}\n\n")))

    if not flag:
        to_send_text = Text(to_send_text, "–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
        return to_send_text

    soup = BeautifulSoup(working_day, 'lxml')
    lessons = soup.find_all("li", class_="lesson")

    icons = {"–ü—Ä–∞–∫—Ç–∏–∫–∞": "üîµ", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ": "üî¥"}

    for lesson in lessons:

        lesson_info = lesson_info_finder(lesson)

        icon = icons.get(lesson_info[2], "üü¢")

        to_send_text += Text(Bold(Underline(f"{lesson_info[3]}")), " - ",
                        Bold(Italic(f"{lesson_info[0]}"), f"\n    {icon} ", f"{lesson_info[2]}\n"), "    üè¢ ",
                        Underline(f"{lesson_info[1]}\n"), f"    üë® {teacher_name}\n\n")

    to_send_text += Text("\n")

    return Text(to_send_text)

def schedule_teachers_weekly_dp(teacher_name: str, local_date):
    soup, teacher_name = schedule_teachers_helper(teacher_name, local_date)
    if type(soup) == Text: return soup

    schedule_days = soup.find_all("li", class_="schedule__day")

    to_send_text = Text(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ", Underline(Bold(local_date.strftime('%d/%m/%Y'))), " –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n", Italic(Bold(teacher_name)), "\n\n")

    if not schedule_days:
        return Text(to_send_text, "–í —ç—Ç–æ –≤—Ä–µ–º—è —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")

    icons = {"–ü—Ä–∞–∫—Ç–∏–∫–∞": "üîµ", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ": "üî¥"}

    for day in schedule_days:
        date = BeautifulSoup(str(day), 'lxml').find("div", class_="schedule__date").text + "\n"
        to_send_text += Text(date_extender(date))

        lessons = BeautifulSoup(str(day), 'lxml').find_all("li", class_="lesson")

        for lesson in lessons:
            lesson_info = lesson_info_finder(lesson)

            icon = icons.get(lesson_info[2], "üü¢")

            to_send_text += Text(
                f"    ", icon, Bold(Underline(lesson_info[3])), f" -  {place_formatter(lesson_info[1])} - ", Bold(Italic(lesson_info[0])), "\n")

        to_send_text += Text("\n")

    return to_send_text